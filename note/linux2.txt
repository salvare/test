5-1 egrep 及 扩展正则表达式
1.[command] grep
* option:	-E	使用扩展正则表达式	即egrep命令
* option:	-A	after,同时显示 匹配到的行 的后几行 , 会有--表示分隔
		-B	before
		-C	context,同时显示上下的几行
. 扩展正则表达式
  . 新增： +出现一或多次 	|或者	
  . () ? <> {}都不再需要转义
. fgrep	速度快(fast)，但不支持正则表达式


5-2 bash脚本编程 变量、变量类型

1.[other] Re: 编程语言分类
. 编程语言 --编译器/解释器--> 机器语言
. 高级语言，机器语言，汇编语言
. 静态 & 动态
  . 静态语言	编译型语言	强类型		事先转换为可执行文件，不再依赖其它	C,JAVA
  . 动态语言	解释性语言	弱类型		边解释边执行，依赖解释器执行		SHELL,python,perl
. 变量：命名的 内存空间
  . 内存：编址的存储单元
  . 一个ASCII码占8bit，字符的存储基本单位是一字节byte
  . 而数字最小存储单位是bit
  . 变量类型：事先定义好数据的 存储格式和长度
. 缓冲区溢出攻击	存在于编译型语言，解释型语言采用了别的机制解决这个问题
. 强类型 & 弱类型
  . 强：变量需要声明，有的语言设置要初始化
  . 若：不需要声明，设置不区分类型

2.[system] bash变量
. 类型	
  . 环境变量
  . 本地变量（局部变量）
  . 位置变量（$0 $1 ...）
  . 特殊变量（$? $! $# ...）
. 创建变量：	例：# NAME=Jerry  # echo $NAME
. 需要变量名避免歧义的话：	例：#echo "There are some ${ANIMAL}s"
  . 双引号""弱引用，可以替换变量
  . 单引号''强引用，不会解释变量
. 本地变量
  . 声明： `NAME=Jerry`		
  . 作用域：整个bash进程
. 局部变量
  . 声明： `loacl NAME=Tom`	
  . 作用域：函数内部
. 环境变量
  . 声明： `export NAME=Harry`	
  . 作用域：当前进程和子进程
  . 注意：普通变量(指上两种)是进程的变量，父bash中的变量 不能再子bash中读取
  . 任何脚本执行时 会启动一个子shell进程
	. 命令行中启动的脚本会继承当前shell环境变量
	. 系统自动执行的脚本（非命令行启动），需要自己定义需要的环境变量
. 特殊变量、位置变量
  . 是`shell`进程提供的特定含义的变量
  . $1 // 第一个参数
    ! 获取第十个参数需要${10}。当n>=10时，需要使用${n}来获取参数
    . 如果没有10个参数的话，${10}的值为空
  . $0 // 当前脚本路径，某种意义上就是第0个参数
  . $# // 参数个数 
  . $* // 所有参数，形如："a b c"
  . $@ // 所有参数，形如："a" "b" "c"
  . $$ // 当前脚本进程的PID号
  . $! // “后台”运行的最后一个进程的ID号
    ! 注意是后台 `somecommand &`
  . $? // 上一个命令的结束代码（或函数返回值） 
    . 范围 `0-255`	
    . `0`表示正确；`1``2``127`为系统预留状态值
    . 如果`exit 300`，实际状态码为`44` (44=300%256)
  . $_ // 上一个命令的最后一个参数
  . $- // Shell使用的当前选项 ？？？
. 注销变量
  . unset VARNAME

3.[shell] `bash`控制语句
. 条件语句
	if [[ ... ]] 
	then 
	  ...
	elif [[ ... ]]
	then
	  ...
	else
	  ...
	fi
  . 如果写作一行的话：只要`then`前面需要加`;`
	if [[ ... ]]; then ... elif; then ... else ... fi
. FOR循环
	for loop in 1 2 3 4 5
	do
	    echo "The value is: $loop"
	done
  . 如果`list`是数组的话，`${list[*]}`和`${list[@]}`都行
  ! 各循环语句都可以用`continue``break`
. FOR循环
	for((assignment;condition:next))
	do
		...
	done;
. WHILE循环
	while condition
	do
	    ...
	done
. UNTIL循环
	until condition
	do
	    ...
	done
. 条件分支语句
	case 值 in
	模式1)
	    ...
	    ;; 
	模式2）
	    ...
	    ;;
	esac
  . `;;`是必要的
  . 匹配到一个`pattern`就是停止，不会像`PHP`一样执行所有下面的

4.[shell] 变量类型
. 字符串
  . shell中默认所有变量类型都是字符串
  . A=1; B=2; C=$A+$B; echo $C;  // 输出：`2+3`
. 数字
  . 弱类型语言 数字 和 字符串 没有定义上的区分，只要是数字就行了
  . 运算：$[ 1 + 2 ] 或者 `expr 1 == 1` <= 注意：这里的反引号“``”是必须的，详见5-2-5
. 布尔值
  . 本质上是 1 和 0
. 数组
  . LIST=(1 2 3 4 a)
  . ${LIST[0]} // 第一个元素
  . length=${#array_name[@]} // 数组长度
    length=${#array_name[*]}  
  . lengthn=${#array_name[n]} // 取得数组单个元素的长度
  . ${array_name[@]} // 数组中所有元素
    ${array_name[*]}
  . 字符串转数组
	.	foo="1 2 3"
		arr=($foo)
	.	foo="1,2,3"
		OLD_IFS="$IFS"
		IFS="," // 这个变量定义了声明数组时所用的分割符？
		arr=($foo)
		IFS="$OLD_IFS"

5.[shell]
. $( ) 或 ``	
  . 执行Shell命令
. $(( ))	
  . 用途1：简单算数运算
  . 用途2：支持三目运算符 $(( 表达式?数字:数字 ))
    . A && B || C // if(A){ B }else{ C }
    . A || B && C // if(A){ C }elseif(B){ C }
. $[ ]	
  . 简单算数运算
. [ ]	
  . 条件表达式，里面不支持逻辑判断符
. [[]]
  . 条件表达式，支持逻辑判断符(指||和 &&)
. { }	
  . 对逗号（,）和点点（...）起作用，
  . 比如touch {1,2}创建1和2文件，touch {1..3}创建1、2和3文件
. 参考  
  # http://blog.51cto.com/lizhenliang/1882219【Shell表达式与运算符】
  # http://www.runoob.com/linux/linux-shell-basic-operators.html【Shell 基本运算符】
！注意：所有运算的 运算符两边 一定要有空格 
  . $[ 1 + 2 ] // 正确
  . $[1+2] // 错误  

6.[shell] 执行shell脚本
. 魔数 `#!/bin/bash`
  . 脚本写完之后是一个ASCII text文件，所以给脚本文件的首行加上魔数
  . 机制：脚本文件提交给内核，内核发现不能执行，但是内核发现魔数，内核按指定的路径启动bash进程作为解释器
. 没有x权限，手动加 chmod +x first.sh
  . 或者这样执行： bash first.sh	这种情况不需要first.sh有x权限
. 环境变量：执行命令的路径如果在环境变量中 才可以 直接通过文件名执行








