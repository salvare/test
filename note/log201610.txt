
3.[os] 初步理解操作系统中 文件描述符+文件表项+V节点表项
@追加首先。。V节点是Unix系统的结构，linux没有。。
@首先，文件是操作系统的资源，由OS的相应机制来管理；
  运行在系统上的进程，可以通过系统调用（或者建立在其上的更高层函数）打开文件，但依然在这套机制的管理下。
@这套机制的大致框架就是：文件描述符+文件表项+V节点表项
@V节点表
*每个被打开的文件都有一个V节点结构， 对应着【存储的真实文件状态】
*是系统级别的结构
*V节点包含了文件类型和对此文件进行各种操作的函数的指针。对于大多数文件，V节点还包含了该文件的I节点(inode)。
@文件表
*内核为所有打开的文件维持一张文件表(同一个文件可以被打开多次，所以同一个文件可以在文件表中占有多项)
*是系统级别的结构
*每个文件表项包含：
  . 文件状态标志(读、写、添写、同步和非阻塞等)
  . 当前文件偏移量
  . 指向该文件的V节点表项的指针
*总结一下：文件表项对应着【文件被打开的状态】
@文件描述符表
*仅仅是是【进程级别】的结构
*指向一个文件表项的指针
@总结三者关系： 一个V节点 对应 多个 文件表项，一个文件表0项 对应多个 文件描述符
@参考：http://blog.csdn.net/gzzheyi/article/details/7739556 【very good】
http://blog.csdn.net/todd911/article/details/11617519 【excellent】
http://www.tuicool.com/articles/3QB7vq6


堆栈
	分配		数据结构		
栈(stack)	系统分配		栈
堆(heap)	程序申请		类似链表

共同点：
都是存储 函数内的数据，全局变量/静态变量 存储在 静态区(static)

堆栈 是在 操作系统层面 还是 进程层面？


7.[other] 哪些因素影响程序的执行效率？
  硬件层面的 程序执行流程？
*http://www.cnblogs.com/JeffreyZhao/archive/2010/01/07/short-code-is-not-always-fast-1-algorithms.html
.论点：算法（如对排序处理） 数据结构（如单向链表）   
.衡量算法效率：时间复杂度，空间复杂度
	` 以上两者数学层面上的“理论值”
	` 处理目标数据本身的“无序性”【这句是自己的话，不精确】
	` 当运算规模大到一定程度大时，参考价值比较高
	` 处理数据有限时，甚至数据往往有一定特征时，时间复杂度低的算法未必有好的表现
*http://www.cnblogs.com/n216/archive/2009/12/30/1635669.html
.【此文说法有很多不妥，但同样可以参考很多观点】
. 程序的效率本质是执行可执行代码（汇编指令）的次数。
. 使用 内存/缓存，减少 I/O/硬盘 操作
. 选择更接近底层的程序设计语言
. 源程序究竟是如何变成可执行代码、变成什么可执行代码，这些可执行代码的执行时间是长是短
  源程序到可执行程序的过程，深懂编译原理、深懂汇编语言、深懂汇编中的系统调用。
  对于数据库而言，程序员要深懂数据库原理、数据存放方式和数据查询方式，深懂数据库操作与I/O操作与内存的关系
*有些运行速度快的代码，有可能会消耗过量的内存，以至于得不偿失，要小心不要盲目追求运行速度。
*同样，牺牲微不足道的一点性能，以保证程序的健壮性、可读性，甚至只是为了提高开发效率，都是正确的做法
*题外：Query Profiler 数据库查询性能分析优化 
http://www.cnblogs.com/ggjucheng/archive/2012/11/15/2772058.html


