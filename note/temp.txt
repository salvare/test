===optimization==================================================
@ 批量导出按钮优化
@ 选择**弹框优化
  * 当前做法
    . 页面html <input name="name"/><input name="id" type="hidden"/> <span id="choose_customer">选择</span>
    . 页面js $("#choose_customer").on("click", function() { // 可能会有一些预先处理，如先判断另一个值是否存在并读取 // 弹框 // /admin/gpsabnormal/choosecustomer }
    . 弹框html // 搜索栏 // 标题 // 列表项 
    . 弹框js $(".choose_item").on("click", function(){ parent.choose_customer(customer_id, customer_name); // 判断关闭弹窗 })
    . 弹框控制器 // 处理搜索 // 获取数据
  * 优化
    . 页面html // 原有部分不变（其实一般插件的做法是自动生成html） // <span class="popup-selector">选择</span>
    . 页面js $(".popup-selector").popupSelector("init", {param...url}).before().after()
    . 弹框html（公共） // 根据配置显示 搜索栏 标题 列表项 
    . 弹框js （公共，插件）
    . 弹框控制器 // 只需要 1.获取本页数据 2.分页栏 3.表头-字段对应数组
  * 结果上
    . 页面html 不变
    . 页面js 简化，逻辑更清晰
    . 弹框html 省略
    . 弹框js 省略
    . 弹框控制器 简化，逻辑更清晰 :-D
  * 欠缺
    . 弹框控制器 还能进一步简化，只返回数据。在客户端完成html的生成 和 分页

===导出按钮可以添加公共js=============================================
* 原来：1.在模板中添加<input name="op|ids"> 2.拼选中项id的js
* 改进后：只需要html <span type="submit" class="layui-btn layui-btn-sm addButton batchButton" fun="batchExport" param="this" data-allow-no-choice="1" id="">导出</span>
# 总结：公共功能的组件，在使用时代码尽量集中，比如用class限定对象，用html参数设置参数
=================================================================


前端，经常是修改表单项时，对其它项的计算。因为相似的页面，其实也可能有不同之处。该怎么写出公共方法？
↑ react.js 

http://blog.jobbole.com/53736/【为什么我要用 Node.js?】

require js

http://www.cnblogs.com/adforce/archive/2012/11/23/2784664.html【.htaccess 详解】


lalala<script src="http://www.play.com/test.js"></script>
角度：浏览器保障 一般用户 的使用安全。

http://www.cnblogs.com/landeanfen/p/4976838.html【bootstrap table】


http://www.jianshu.com/p/773fd334052f【驼峰命名和下划线命名互转php实现】


在loan表中设置loan_attach_id VS 在loan_attach表设置loan_id


http://bbs.csdn.net/topics/391947907?page=1【一次性获取所有数据，还是分次获取，哪个比较好】

http://www.jb51.net/article/48198.htm【file控件选择上传文件确定后触发的js事件是哪个】
http://www.ruanyifeng.com/blog/2012/08/file_upload.html【文件上传的渐进式增强 - 阮一峰】
https://www.cnblogs.com/yuanlong1012/p/5127497.html【关于js异步上传文件】
http://www.jb51.net/article/82611.htm
只要添加`multiple`属性就可以选择多个文件了


Bytes_received			Both	从所有客户端接收到的字节数。
Bytes_sent			Both	发送给所有客户端的字节数。
Created_tmp_disk_tables		Both	服务器执行语句时在硬盘上自动创建的临时表的数量
open_tables			Both	当前打开的表的数量。
Select_full_join		Both	没有使用索引的联接的数量。如果该值不为0,你应仔细检查表的索引
Select_full_range_join		Both	在引用的表中使用范围搜索的联接的数量。
Select_range			Both	在第一个表中使用范围的联接的数量。一般情况不是关键问题，即使该值相当大。
Select_range_check		Both	在每一行数据后对键值进行检查的不带键值的联接的数量。如果不为0，你应仔细检查表的索引。
Select_scan			Both	对第一个表进行完全扫描的联接的数量。
Sort_merge_passes		Both	排序算法已经执行的合并的数量。如果这个变量值较大，应考虑增加sort_buffer_size系统变量的值。
Sort_range			Both	在范围内执行的排序的数量。
Sort_rows			Both	已经排序的行数。
Sort_scan			Both	通过扫描表完成的排序的
Sending data标出来是要特别注意一下，并不只是在服务器端和客户端之间sending data，还包括了从磁盘读取数据的时间，所以对大表执行全表扫描or索引的效率不高时，这个时间会比较高 
找到了主要耗时的部分，那么就建立一个索引，再来看看profile的数据


https://blog.csdn.net/u012654882/article/details/54576693【WebSocket与http的区别，以及它的原理】
https://www.cnblogs.com/jiangzuo/p/5896301.html【浅谈php中使用websocket】
https://www.cnblogs.com/genialx/p/5932558.html【MySQL局部变量 会话变量 全局变量】

==================

利用Apache的rewrite模块对 URL 进行重写
AllowOverride参数就是指明Apache服务器是否去找.htacess文件作为配置文件，如果设置为none,那么服务器将忽略.htacess文件，如果设置为All,那么所有在.htaccess文件里有的指令都将被重写
在 AllowOverride 设置为 None 时， .htaccess 文件将被完全忽略。当此指令设置为 All 时，所有具有 ".htaccess" 作用域的指令都允许出现在 .htaccess 文件中。 
https://www.cnblogs.com/gooldns/p/gooldns_com.html【allow override】
    # AllowOverride controls what directives may be placed in .htaccess files.
    # It can be "All", "None", or any combination of the keywords:
    #   AllowOverride FileInfo AuthConfig Limit
RewriteRule ^products/([^/]+)/([^/]+)/([^/]+) product.php?cat=$1&brand=$2&prod=$3

dump(0=='a'); // true
原因：等同于计算`0==(int)'a'`

浏览器会缓存301重定向，当发生过一次 请求url1->301->再请求url2 之后，再次请求url1时，会直接请求url2

lv1: 主关系(loan)ID + 查询条件 + 逐行数据查询
lv2: 主关系ID+GROUP其它耗时字段 + 查询条件 + 逐行剩余数据查询 
  . 数据量大时（导出）得到优化，毕竟导出一百条时可以减少几百条查询
  . 由于主sql变复杂，导致分页时COUNT极慢
lv2.5: 去除一切额外查询。并利用已有的缓存
lv3: 主关系+查询条件分页，得到主关系ID后用lv2.5


# 对model的where方法多加一层，以方便or关系的写法
$model->where(['mark'=>1, 'customer_id<>0 OR signer_id<>0'])


外键！！

@ 证书/CA
* https://blog.csdn.net/wangjun5159/article/details/51510594【https 建立连接过程】
  1 请求服务器
  2 服务器返回证书（含公钥）
  3 客户端（一般是浏览器）使用`根证书`验证返回的证书
  4 值的注意的是：双方是通过SSL生成了一个对称秘钥，然后通过对称秘钥通信
  5 开始通信...
# http://www.techug.com/post/https-ssl-tls.html【https】
* `chrome://settings`中可以管理证书
  . 可以添加 根证书颁发机构/中级证书颁发机构/收信任的发布者？/个人？/其他人？
  . 里面是浏览器自带的信任证书，用户也可以自行管理
* 如何成为CA机构？
  # https://www.zhihu.com/question/22576958【CA机构的根证书(root certificate)是由谁签发的?】
    . 公信度 / 找审计公司做webtrust标准的审核
  # 各根证书颁发机构也会有（特定或各自的？）标准授权中级证书颁发机构
* 证书的内容
# https://jingyan.baidu.com/article/7f766dafac12e24101e1d01a.html【自建CA服务器】
# 其它
  # https://q.cnblogs.com/q/54969/【受信任的SSL证书是否必须要有域名才行？】


https://blog.csdn.net/baidu_36649389/article/details/53240579 【数字证书有效性验证】【important】
https://blog.csdn.net/zhangbinsijifeng/article/details/51543832【数字证书引入的原因 CA机构 授权认证中心】
https://blog.csdn.net/xiangguiwang/article/details/76400805【DER、CRT、CER、PEM格式的证书及转换】
https://www.zhihu.com/question/24294477【数字证书的原理是什么？】

签名算法 
sha256RSA
颁发者
CN = DigiCert SHA2 Secure Server CA
O = DigiCert Inc
C = US
颁发机构密钥标识符
KeyID=0f 80 61 1c 82 31 61 d5 2f 28 e7 8d 46 38 b4 2c e1 c6 d9 e2
颁发机构信息访问
[1]Authority Info Access
     Access Method=联机证书状态协议 (1.3.6.1.5.5.7.48.1)
     Alternative Name:
          URL=http://ocsp1.digicert.com
[2]Authority Info Access
     Access Method=证书颁发机构颁发者 (1.3.6.1.5.5.7.48.2)
     Alternative Name:
          URL=http://cacerts.digicert.com/DigiCertSHA2SecureServerCA.crt

php如何生成秘钥对？？ sha256rsa
https://blog.csdn.net/linvo/article/details/8543118
https://blog.csdn.net/small_rice_/article/details/45074979

CRL(Certificate Revocation List 证书吊销列表)
OSCP
http://blog.51cto.com/qingwang/1124998【什么是证书吊销列表(CRL)？ 吊销列表起什么作用 ？】【good】


http://www.04007.cn/article/259.html【使用php生成RSA公钥私钥及进行加密解密示例】
https://blog.csdn.net/zhihua_w/article/details/74002212【PHP开发接口使用RSA进行加密解密方法】
https://blog.csdn.net/anxuegang/article/details/6162118【RSA PKCS1 填充方式】


自然数N，N 和 N+1 的最大公约数是1。最小公倍数是N*M
https://baike.baidu.com/item/%E6%9C%80%E5%A4%A7%E7%B4%A0%E6%95%B0/6044923?fr=aladdin【最大素数】
https://blog.csdn.net/lvxiangan/article/details/45487943【RSA密钥长度、明文长度和密文长度】

https://www.cnblogs.com/QKSword/p/8149053.html【补码的意义】
补码存在的意义就是为了统一计算机加减
比如（2）+（-3）=（-1）
2   -> 0000 0010 （2的补码）
-3  -> 1111 1101 （-3的补码）
相加为 1111 1111（-1的补码）
加法器算得的是 1 1111 1111，溢出的最高位被忽略了

https://www.zybang.com/question/47a8e62546fc4d5d1076855aa8855a2b.html【真值表写出逻辑表达式】
逻辑运算
A*B表示交集运算
A+B表示并集运算
A'表示非运算
得：
A*A'=0
A*B=B*A // 交换律
A+B+B+A // 交换律
(A*B)*C=A*(B*C) // 结合律
(A+B)+C=A+(B+C) // 结合律
(A*B)+C=(A+C)*(B+C) // 分配率
(A+B)*C=(A*C)+(B*C) // 分配率


「递归」和「迭代」有哪些区别？ - 叶飞影的回答 - 知乎
https://www.zhihu.com/question/20278387/answer/123876191

https://www.zhihu.com/question/23042131【DNS解析的过程是什么，求详细的？】
https://www.zhihu.com/question/23042131/answer/66571369


dump(debug_backtrace(~DEBUG_BACKTRACE_PROVIDE_OBJECT & DEBUG_BACKTRACE_IGNORE_ARGS));


https://blog.csdn.net/baidu_30000217/article/details/50895587【__sleep和__wakeup、序列与反序列】


【php】判断类型是否实现某接口
(new ReflectionClass($class))->implementsInterface(
                'Illuminate\Contracts\Queue\ShouldQueue'
            )
？判断类型不是可以用instanceof吗  <= 确实可以，instanceof 可以判断 父类、接口


？参数数量不确定如何实现
可以通过 call_user_func_array('some_func', $params_arr); 调用

【php】glob函数
http://www.w3school.com.cn/php/func_filesystem_glob.asp
返回匹配指定模式的文件名或目录



？？public/install.php
SmartWiki\Http\Middleware\InstallMiddleware


？？PSR-7
https://www.php-fig.org/psr/psr-7/
https://www.jianshu.com/p/dff3dcbdb16c

？？对应用(App) 和 核心(Kernel) 的理解
核心会有多个：Http | Console



http://php.net/manual/zh/class.iteratoraggregate.php （聚合式迭代器）接口
https://blog.csdn.net/u012675743/article/details/50834845

$_SERVER['argv']
https://blog.csdn.net/csdn_azuo/article/details/79092479
cli模式（命令行）下


【其它】
1. Illuminate\Foundation\Application 中定义了 `const VERSION = '5.4.24'`
2. https://www.cnblogs.com/phpstudy2015-6/p/6771239.html【CSRF攻击与防御】
3. HTTP是一个无状态的协议。这句话里的无状态是什么意思？ - 阁刚广志的回答 - 知乎
   https://www.zhihu.com/question/23202402/answer/89072044
4. php`compact`函数



http://laravelacademy.org/laravel-docs-5_4

https://www.zhihu.com/question/31592553【为什么form表单提交没有跨域问题，但ajax提交有跨域问题？】


【语法】
1. ‘=’是从右向左结合的
  static::$resolvedInstance[$name] = $mock = static::createMockByName($name);
2. 处理 数组参数或多个参数 的兼容写法
  $this->pipes = is_array($pipes) ? $pipes : func_get_args();
  public function tag($abstracts, $tags)
  {
    $tags = is_array($tags) ? $tags : array_slice(func_get_args(), 1);
    ...
  }


【解析】$app->singleton(
    Illuminate\Contracts\Http\Kernel::class,
    SmartWiki\Http\Kernel::class
);
$kernel = $app->make(Illuminate\Contracts\Http\Kernel::class);
所以实例化的是`SmartWiki\Http\Kernel`对象


【疑问】`对大多数应用而言，都是从 routes/web.php 文件开始定义路由`
  所以说路由文件不是自动加载的。`smartwiki`的做法是在`routerServiceProvider`中进行
？？服务提供者又是如何定义在不同环境？中加载的？


【解决】在哪里注册app目录映射到SmartWiki命名空间的
vendor/composer/autoload_psr4.php
    'SmartWiki\\' => array($baseDir . '/app'),
但是 autoload_psr4.php @generated by Composer
于是 /composer.json
     "autoload": {
        "classmap": [
            "database"
        ],
        "psr-4": {
            "SmartWiki\\": "app/",
            "Gregwar\\Captcha\\": "vendor/Captcha/"
        },
        "files": [
            "app/helpers.php"
        ]...


【疑问】`$this->events->fire(new Events\RouteMatched($route, $request));`
？？这是什么机制？是否类似tp的钩子？


【概念】控制反转（Inversion of Control，英文缩写为IoC


【解决】为什么能直接通过`use Cache;`替代`use Illuminate\Support\Facades\Cache;`
config/app.php中的aliases段定义了类别名
Illuminate\Foundation\Bootstrap\RegisterFacades启动项中
  AliasLoader::getInstance($app->make('config')->get('app.aliases'))->register();
  spl_autoload_register([$this, 'load'], true, true);
  public function load($alias)
    {
        if (isset($this->aliases[$alias])) {
            return class_alias($this->aliases[$alias], $alias);
        }
    }
参考：https://www.jianshu.com/p/2ee55cd49cf7【good】【Facades布局及Laravel对其的实现】



当前应用环境由 .env 文件中的 APP_ENV 变量决定，你可以通过 App 门面 的 environment 方法来访问其值：
$environment = App::environment();

访问配置值
$value = config('app.timezone');
设置配置值
config(['app.timezone' => 'America/Chicago']);


	$app = app();
    	
    	$app['events']->fire(new \SmartWiki\Events\SomeEvent('hello'), [], true);
    	$app['events']->fire('event.foo');
    	
    	dump($app['events']);
    	
    	
    	return;
=========================================================================

channel
handler - path -level
        - processor
        - formatter


http://www.phpunit.cn/getting-started.html
https://www.zhihu.com/question/28729261【单元测试到底是什么？应该怎么做？】




http://laravel-admin.org/docs/#/
http://malsup.com/jquery/form/#sample1
http://wenda.golaravel.com/article/23

https://www.zhihu.com/question/31592553【为什么form表单提交没有跨域问题，但ajax提交有跨域问题】

前端测试 | selenium
https://www.sass.hk/docs/【Sass (Syntactically Awesome StyleSheets)】

https://www.cnblogs.com/ksl666/p/5944718.html【js中const,var,let区别】

https://www.zhihu.com/question/39943474【React Angular Vue】

http://www.css88.com/react/





===react=====================================================


组件(component)
  React.Component
  JSX
    render 返回一个 React 元素，这是一个渲染内容的轻量级描述。
    JSX 可以容易地编写这些结构
    注意：JSX只是看着像HTML，但不是
      class="square" => className="square"
      onclick="()=>alert('hhh')" => onClick={()=>alert('hhh')} // 注意是属性名是驼峰法
  this.props.{key}
  this.state.{key}
  this.setState({key: 'value'})
    必须使用setState才能刷新组件，直接修改this.state不行
      每当 Board(棋盘) 组件的 state(状态) 发生变化时， Square(方格) 组件会自动重新渲染。
      Square(方格) 组件不再保持自己的 state(状态) ;它从父级 Board(棋盘) 组件中接收其值，并在点击时通知其父级组件。我们称这些组件为 受控组件。
  不可变数据的重要性（Why Immutability Is Important）
    ? 追踪变更（Tracking Changes）

React Devtools extension

由于组件的 state(状态) 被认为是私有的，我们不能从 Square(方格) 组件直接更新 Board(棋盘) 的 state(状态) 。


元素(Elements)是 React 应用中最小的构建部件

组件(Components) 
  可以传入属性(Props)
    传入 <Welcome name="Sara" />;
    使用 {props.name}
  组件可以在它们的输出中引用其它组件
    组件必须返回一个单独的根元素。这就是为什么我们添加一个 <div> 来包含所有 <Welcome /> 元素的原因。
  组件名称总是以大写字母开始
  Props 是只读的
    类组件应始终使用 props 调用基础构造函数

更新UI的方式
  1.通过调 ReactDOM.render() 方法来更新渲染的输出
  2.setState

状态(State)
  state 和 props 类似，但是它是私有的，并且由组件本身完全控制
    它不能被拥有并设置它的组件 以外的任何组件访问
数据向下流动
  一个组件可以选择将 state(状态) 向下传递，作为其子组件的 props(属性)

生命周期？？

mounting(第一次渲染到DOM时)
             componentDidMount
             componentWillUnmount
unmounting(DOM 被销毁时)
  componentWillUpdate
  componentDidUpdate 

this.handleClick = this.handleClick.bind(this);
有绑定的话，可以这么写： <button onClick={this.handleClick}>
否则：                   <button onClick={(e) => this.handleClick(e)}>
或：                     <button onClick={this.handleClick.bind(this, e)}>
  通过箭头函数的方式，事件对象必须显式的进行传递，但是通过 bind 的方式，事件对象以及更多的参数将会被隐式的进行传递

直接修改 state(状态) `this.state.comment = 'Hello';` 不会重新渲染一个组件。用 setState() 代替

注意：state(状态) 更新可能是异步的
即：// prevState
    setState({ // newState })
    this.state // 此时`this.state`不能确定是prevState还是newState
// 错误
this.setState({
  counter: this.state.counter + this.props.increment,
});
// 正确
this.setState((prevState, props) => ({
  counter: prevState.counter + props.increment
}));

state(状态)更新会被合并
// prevState {s1:1, s2:2}
this.setState({s1:9})
// currState {s1:9, s2:2} 而不是 {s1:9} 或是 {s1:9, s2:null}

？将参数传递给事件处理程序 http://www.css88.com/react/docs/handling-events.html 最后

bind()方法会创建一个新函数，称为绑定函数，当调用这个绑定函数时，绑定函数会以创建它时传入 bind()方法的第一个参数作为 this，传入 bind() 方法的第二个以及以后的参数加上绑定函数运行时本身的参数按照顺序作为原函数的参数来调用原函数

react元素数组放在标签内，会自动迭代
<ul>{listItems}</ul>

KEY 
当要渲染的列表项中没有稳定的 IDs 时，你可以使用数据项的索引值作为 key 的最后选择
const todoItems = todos.map((todo, index) =>
  <li key={index}>
    {todo.text}
  </li>
);
keys 在同辈元素中必须是唯一的



http://www.css88.com/react/docs/hello-world.html
http://www.css88.com/react/tutorial/tutorial.html
http://www.cnplugins.com/devtool/react-developer-tools/

http://www.w3school.com.cn/jsref/jsref_slice_array.asp【JavaScript slice() 方法】
https://www.cnblogs.com/libin-1/p/6069031.html【js bind call apply】
http://www.runoob.com/jsref/jsref-map.html【js map】

https://www.runoob.com/nodejs/nodejs-install-setup.html【nodejs安装】
  官网可以获得最新版本


https://jingyan.baidu.com/article/17bd8e525081be85ab2bb88c.html【解决Windows路径太长的目录及文件如何删除】
https://blog.csdn.net/wp_boom/article/details/79011177【npm 安装React Devtools调试工具】【失败】
https://pan.baidu.com/s/1eSZsXDC【react-developer-tools.crx】

表单(Forms)
受控组件(Controlled Components)
共享 state(状态) 是通过将其移动到需要它的组件的最接近的共同祖先组件来实现的。 这被称为“状态提升(Lifting State Up)”

this.props.children



===代扣优化=============================================
ALTER TABLE `oa_fuiou_charge_log`
ADD COLUMN `has_sub`  tinyint(4) NOT NULL DEFAULT 2 COMMENT '是否分成多次代扣 1是2否' AFTER `amount`;

CREATE TABLE `oa_fuiou_charge_log_sub` (
  `id` int(11) NOT NULL,
  `base_id` int(11) NOT NULL COMMENT 'fuiou_charge_log表ID',
  `amount` decimal(10,2) NOT NULL DEFAULT '0.00' COMMENT '代扣金额',
  `fuiou_project_id` varchar(100) NOT NULL DEFAULT '' COMMENT '富友项目号',
  `fuiou_orderno` varchar(100) NOT NULL DEFAULT '' COMMENT '富友代扣请求流水号',
  `fuiou_rsp_code` varchar(100) NOT NULL DEFAULT '' COMMENT '富友响应状态码',
  `status` tinyint(4) NOT NULL DEFAULT '0' COMMENT '状态 1成功 2代扣失败 3项目录入失败 4参数错误',
  `remark` varchar(1000) NOT NULL DEFAULT '' COMMENT '备注',
  `create_time` int(11) NOT NULL DEFAULT '0' COMMENT '添加时间',
  `create_user` int(11) NOT NULL DEFAULT '0' COMMENT '添加人',
  `update_time` int(11) NOT NULL DEFAULT '0' COMMENT '更新时间',
  `update_user` int(11) NOT NULL COMMENT '更新人',
  `mark` tinyint(4) NOT NULL DEFAULT '1' COMMENT '1有效 2无效',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;



amount
fuiou_project_id
fuiou_orderno
fuiou_rsp_code
status
remark
...


签约-发送短信验证码
<srcChnl>%s</srcChnl>	-
<busiCd>%s</busiCd>		-
<bankCd>%s</bankCd>		- 
<userNm>%s</userNm>		账户名称 ACCOUNT MAX(30) 银行卡账户名称 必填 孙悟空
<mobileNo>%s</mobileNo>	手机号码 MOBILENO MAX(11) 银行卡预留手机号码 必填 13888888888
<credtTp>%s</credtTp>	证件类型	证件类型 0：身份证
<credtNo>%s</credtNo>	证件号码 IDCARD MAX(30) 证件号码 必填 420116199001011234
<acntTp>%s</acntTp>		-
<acntNo>%s</acntNo>		银行卡号 CARDNO MAX(20) 银行卡号 必填 6225885865354179
<mchntCd>%s</mchntCd>	商户代码	MCHNTCD 
<isCallback>%s</isCallback>	-
<signature>%s</signature>	摘要数据 SIGN
						版本号 	VERSION	 1.0
						用户编号	USERID MAX(40) 商户端用户的唯一编号，即用户 ID
						交易请求日期	TRADEDATE	交易请求日期 20180417
						商户流水号	MCHNTSSN MAX(30) 商户流水号，保持唯一

签约-协议卡绑定
<acntNo>%s</acntNo>		银行卡号 CARDNO MAX(20) 银行卡号 必填 6225885865354179
<mchntCd>%s</mchntCd>	商户代码 MCHNTCD 15 分配给各合作商户的唯一识别码 必填 0002900F0096235
<verifyCode>%s</verifyCode>	手机短信码 MSGCODE MAX(6) 用户通过短信接口接收到的短信 测试默认 000000
<signature>%s</signature>	摘要数据 SIGN VERSION
						版本号 VERSION 3 版本号（1.0） 必填 1.0
						用户编号 USERID MAX(40) 商户端用户的唯一编号，即用户 ID 必填 13800138000
						交易请求日期	交易请求日期 必填 20180417
					！！	商户流水号 MCHNTSSN MAX(30) 商户流水号(必须和发送短信流水号保持一致)
						账户名称 ACCOUNT MAX(30) 银行卡账户名称 必填 孙悟空
						证件类型 IDTYPE 2 证件类型 0：身份证 必填 0
						证件号码 IDCARD MAX(30) 证件号码 必填 420116199001011234
						手机号码 MOBILENO MAX(20) 银行卡预留手机号码 必填 13888888888


协议支付接口
<orderno>%s</orderno>
<mchnt_nm>%s</mchnt_nm>
<project_ssn>%s</project_ssn>
<project_amt>%s</project_amt>
<contract_nm>%s</contract_nm>
<project_deadline>%s</project_deadline>
<max_invest_num>1</max_invest_num>
<min_invest_num>1</min_invest_num>
<bor_nm>%s</bor_nm>
<id_tp>%s</id_tp>
<id_no>%s</id_no>
<card_no>%s</card_no>
<mobile_no>%s</mobile_no>
<ver>2.00</ver>			版本号 VERSION 1.0
<merdt>%s</merdt>		-
<orderno>%s</orderno>	
<bankno>%s</bankno>
<accntno>%s</accntno>
<accntnm>%s</accntnm>
<amt>%s</amt>			交易金额 AMT MAX(12) 交易金额，分为单位 必填 100
<mobile>%s</mobile>
<certtp>%s</certtp>
<certno>%s</certno>
<txncd>%s</txncd>
<projectid>%s</projectid>
						客户 IP USERIP 客户所在 IP 地址 必填 116.239.4.194
						商户代码 MCHNTCD
						交易类型 TYPE 03
						商户订单号 MCHNTORDERID MAX(60) 商户订单流水号商户确保唯一 必填 2016021600001
						用户编号 USERID MAX(40) 商户端用户的唯一编号，即用户 ID 必填 13800138000
						协议号 PROTOCOLNO Max(30) 首次协议交易成功好生成的协议号 必填 14907763938986631634
						是否需要发送短信 NEEDSENDMSG Max（1） 固定值：0 必填 0
						后台通知 URL BACKURL Max(200) 后台通知 URL 必填
						签名类型 SIGNTP Max（3） md5 或 rsa 二选一 MD5
						摘要数据




微信登录报错：redirect_uri域名与后台配置不一致，错误码10003
https://blog.csdn.net/pianker/article/details/78959244

https://mp.weixin.qq.com/wiki?t=resource/res_main&id=mp1421140842
微信网页授权

网页授权access_token

1.配置授权回调页面域名
2.$_GET['code']
3.请求 ...oauth2/access_token 获得结果
4.包含access_token 和 openid

openid = oPIev0VLZoOAVHkfxjcU48u9j4b0



https://blog.csdn.net/u012867916/article/details/77430393【SecureCRT & SecureFX】

6222021302016070384
卞明
340122198810207993
15155974353

6228480393878363414
李玉磊
321081199309052410
15861800733



@ `vim`基础操作

正常模式
x 删除
dd 删除行
hjkl ←↓↑→
home ^ 0 行首
end $ 行尾
w e W E 跳转到下一个单词
/<pattern> ?<pattern> 搜索，可按n键到下一个 N上一个
  /<pattern>\c 大小写不敏感 \C大小写敏感
  :set ic 大小写不敏感 :set noic 大小写敏感  （全局）
  :set is 边输入边显示匹配结果 :set nois 取消 （全局）
  :s/foo/bar/ 当前行第一个
  :s/foo/bar/g 当前行所有
  :s/foo/bar/i 忽略大小写
  :s/foo/bar/c 需要确认
    y表示替换，n表示不替换，a表示替换所有，q表示退出查找模式， l表示替换当前位置并退出
  :%s/foo/bar/g 所有行
  :m,ns/foo/bar/g m到n行
  :.,$s/foo/bar/g 当前行到最后一行
  :.,+2s/foo/bar/g 当前行到后2行
* 查找当前光标单词 g* 
u 撤销
ctrl+r 恢复
:N/NG 到第N行
gg 首行
:open :e 打开文件。相当于关掉重新打开了一个文件。
  :bn :bp C^6 :bN 可以切换文件
  :ls 列出
:split :vsplit 多个窗口
  C^w+w C^w+[hjkl] 切换窗格
y 复制
  y10y 复制10行
  yG 复制到末行
  yl y→ 复制右1个字符
  y10l 右10个字符
  . 除了yNy是特殊用法，其它都是 y+光标移动
p 粘贴
  

[N]f<char> 光标跳转到（本行）后第N个<char>字符



插入模式
i o

可视模式
v V C^v gv
C^v块选择模式的操作会同时作用多行
o 切换端点
选中后
d 	删除选中文本
c 	修改选中文本
r 	替换选中文本（用于 tab 替换为 space 挺好用 ）
I 	在选中文本前插入
A 	在选中文本后插入
gu 	选中区域转为小写
gU 	选中区域转为大写
g~ 	大小写互调
> 	向右缩进一个单位
< 	向左缩进一个单位




[O]pen Read-Only, 
  . 只读模式，不能w 但是可以w!
(E)dit anyway, 
  . 可编辑
(R)ecover,
  . 意外关闭时，可以恢复之前的编辑 
(D)elete,
  . 删除临时文件
(Q)uit, 
(A)bort
  . 退出 和 中止，不知道什么区别

vim 可以多次打开同一个文件
临时文件 .swp .swo .swn ...

如果编辑过程中，文件发生了修改，vim会提示是否需要重新载入
  . 重新载入会丢失当前编辑的内容
  . 如果没有重新载入，则保存前会提示：The file has been changed since reading it

https://blog.csdn.net/derkampf/article/details/72629875【vim打开多窗口、多文件】
https://blog.csdn.net/u012467492/article/details/46963829【vim可视模式】

ps aux 查看进程
kill -s 9 8452 杀死进程
tty 查看终端

general_log 		
general_log_file	devtest.log
slow_query_log
slow_query_log_file	devtest-slow.log
log_bin
log_bin_basename	/mysql_data/mysql/mysql-bin
log_error			/mysql_data/mysql/mysql.log

wsd_useraccount2018-09-06
sed -n '/Query/{n;n;p;}' > mysqllog < mysqlbinlog

/mysql_data/mysql/mysql.log

which mysql 可执行文件
whereis mysql 安装目录
rpm -qf `which mysql`
rpm -qa | grep mysql
rpm -ql mysql-libs-5.1.73-5.el6_6.x86_64




history [N]      显示最近的N条命令
!N  执行命令历史中的第N条命令
https://www.cnblogs.com/tae44/p/4455747.html【history介绍及bash命令快速调用】






权限
怎么阅读binlog


/admin/finance/index
fa fa-hourglass-start


http://newerp.ship2p.com/admin/ajax/exportrepay


@ sed
sed <option> '<pattern><command><param>' <file>

option
-n --silent 静默。使用p标志(flag)可以打印选中的行
-i --in-place 实际修改文件
-e -expression 可是使用多个-e选项，多点操作
-f sed脚本是一个sed的命令清单

pattern
支持正则,除了“[]”其它元字符都需要“\”转义
“,”选择行范围
  /test/,/check/
  /test/,+2 选中行 到 后两行
对选中的行施加 多个指令的话 用 {} 包含，用 ; 分隔


command（指令）
s 查找替换
  g 全局
p 打印
i a 插入
  sed '1a\xxx' bar
  sed '1axxx' bar // 没有\语法也是对的，但推荐统一用 a\ i\
d 删除
c 替换选中的行。如果是“,”选中的连续多行将被整体替换。 
  sed '/[a-z]/,/[a-z]/c\xxx' bar
n 读取下一个输入行，用下一个命令处理新的行而不是用第一个命令
  sed '/test/{ n; s/aa/bb/; }' file
q 退出Sed
r file里的内容被读进来，显示在与test匹配的行后面
  sed '/test/r file' filename






http://www.runoob.com/linux/linux-comm-sed.html
http://man.linuxde.net/sed【good】
sed -n '/service/p' foo
sed '/[a-z]\+/{ n; s/$/xxx/; }' night

https://zhidao.baidu.com/question/920824192979282579.html
【shell sed能不能匹配指定字符串之后的第三行，新增一行？】


nl 显示文件行

find <path> -name <file> 查找文件
https://www.cnblogs.com/lanchang/p/6597372.html

C^D EOF字符





command &> file
将 stdout 和 stderr 合并后重定向到 file


？n <& m 	将输入文件 m 和 n 合并。
？文件描述符
http://www.runoob.com/linux/linux-shell-io-redirections.html


Linux用户管理 查看用户信息
https://blog.csdn.net/pianoorrock/article/details/79199317#chfn



注意：系统中错误的输出是无法通过管道的





https://blog.csdn.net/gcxzflgl/article/details/76067256【Linux Bash4种变量】

https://blog.csdn.net/SHEDONG1011/article/details/48402701【Linux下mail命令 邮件的收发】

https://www.cnblogs.com/moveofgod/p/3540575.html【 sed & awk & grep 专题( 鸟哥 )】
https://blog.csdn.net/training2007/article/details/78693808【三十分钟学会AWK】


awk
mysql 用户及权限
mysql_safe
mysql 日志
shell 脚本
mail

    nohup [命令与参数]   --在终端机前台工作  
    nohup [命令与参数] & --在终端机后台工作  


/usr/local/src/mariadb-10.1.25/sql/mysqld
/service/mysql/mysqld
/service/mysql/bin/mysqld
/service/mysql_slave/sbin/mysqld
/root/opstools/src/mariadb-10.1.10/sql/mysqld

root     23892  0.0  0.0 106236  1416 ?        S    May07   0:00 /bin/sh /service/mysql/bin/mysqld_safe --defaults-file=/service/mysql/etc/my.cnf --ledir=/service/mysql/bin
mysql    24078  0.3  9.1 2955828 739196 ?      Sl   May07 536:41 /service/mysql/bin/mysqld --defaults-file=/service/mysql/etc/my.cnf --basedir=/service/mysql --datadir=/mysql_data/mysql --plugin-dir=/service/mysql/lib64/plugin --user=mysql --log-error=/mysql_data/mysql/mysql.log --pid-file=/mysql_data/mysql/mysqld.pid --socket=/tmp/mysql.sock --port=3306
root     24113  0.0  0.0 106232  1420 ?        S    May07   0:00 /bin/sh /service/mysql_slave/bin/mysqld_safe --defaults-file=/service/mysql_slave/etc/my.cnf --ledir=/service/mysql_slave/sbin
mysql    24310  0.0  1.3 2744064 109776 ?      Sl   May07 121:18 /service/mysql_slave/sbin/mysqld --defaults-file=/service/mysql_slave/etc/my.cnf --basedir=/service/mysql_slave --datadir=/mysql_slave_data/mysql_slave --plugin-dir=/service/mysql_slave/lib/plugin --user=mysql --log-error=/mysql_slave_data/mysql_slave/mysql_slave.log --pid-file=/mysql_slave_data/mysql_slave/mysqld_slave.pid --socket=/tmp/mysql_slave.sock --port=3307

mysqld --skip-grant-tables --defaults-file=/service/mysql/etc/my.cnf --basedir=/service/mysql --datadir=/mysql_data/mysql --plugin-dir=/service/mysql/lib64/plugin --user=mysql --log-error=/mysql_data/mysql/mysql.log --pid-file=/mysql_data/mysql/mysqld.pid  --socket=/tmp/mysql.sock --port=3306 


https://jingyan.baidu.com/article/454316ab4e9e65f7a7c03ad1.html【mysql密码忘记了怎么办】
https://www.cnblogs.com/benwu/articles/9061345.html【 mysqld_safe与mysqld区别】


@ 权限
. Usage权限是创建一个用户之后的默认权限，其本身代表连接登录权限
. GRANT USAGE ON *.* TO ''@'localhost' WITH GRANT OPTION
. test开头的数据库 不需要任何权限也能做任何操作
https://www.cnblogs.com/Richardzhu/p/3318595.html【MySQL之权限管理】
https://www.cnblogs.com/Csir/p/7889953.html【MySQL权限详解】
文件类型
-
d 目录
p ?管理文件
l 链接
b 块设备
c 字符设备
s 套接字
普通文件（既不是目录，也不是设备文件）





https://blog.csdn.net/dicyt/article/details/78021214?locationNum=9&fps=1【ECS vs 轻量应用服务器】

ssh -i 'id_rsa_salvare' root@39.108.106.147

Key is invalid. It must begin with 'ssh-ed25519', 'ssh-rsa', 'ssh-dss', 'ecdsa-sha2-nistp256', 'ecdsa-sha2-nistp384', or 'ecdsa-sha2-nistp521'. Check that you're copying the public half of the key 

nano?
reload?
apt-get?
端口 | 套接字?

yum info 
yum list
Available Packages
Installed Packages

硬链接 和 软链接
https://www.cnblogs.com/xiaochina/p/6287997.html
https://www.ibm.com/developerworks/cn/linux/l-cn-hardandsymb-links/index.html


学读脚本
  . 怎样输出到stdout stderr
  . shift
git指定 identity文件
笔记转编码
编辑器是否都自动识别编码？输入是也自动。。？

PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin

 获取字符串长度
string="abcd"
echo ${#string} #输出 4

 提取子字符串
以下实例从字符串第 2 个字符开始截取 4 个字符：
string="runoob is a great site"
echo ${string:1:4} # 输出 unoo
offset:length


read <var>  # 标准输入

echo -e "OK! \n" # -e 开启转义
echo -e "OK! \c" # \c 抑制（不显示）输出结果中任何结尾的换行字符

捕获信号
trap commands signals
信号是一种进程间通信机制，它给应用程序提供一种异步的软件中断，使应用程序有机会接受其他程序活终端发送的命令(即信号)
应用程序收到信号后，有三种处理方式：忽略，默认，或捕捉
如果给该信号指定了一个处理函数(捕捉)，则会中断当前进程正在执行的任务，转而去执行该信号的处理函数，返回后再继续执行被中断的任务

多次运行的脚本 所建的临时文件，一般用"$$"(PID)结尾来区分


       1   Executable programs or shell commands
       2   System calls (functions provided by the kernel)
       3   Library calls (functions within program libraries)
       4   Special files (usually found in /dev)
       5   File formats and conventions eg /etc/passwd
       6   Games
       7   Miscellaneous (including macro packages and conventions), e.g. man(7), groff(7)
       8   System administration commands (usually only for root)
       9   Kernel routines [Non standard]


Re: git无法指定ssh私钥文件
默认是 ~/.ssh/id_rsa文件
https://blog.csdn.net/SCHOLAR_II/article/details/72191042【如何告诉git哪个私钥要使用？】
http://www.blogdaren.com/post-2363.html【Git -i 指定私钥文件】【可用】
https://blog.csdn.net/junbujianwpl/article/details/78650105
大多数方案都不可用







查看/etc/profile的前10行内容，应该是
# head -n 10 /etc/profile
查看/etc/profile的最后5行内容，应该是
# tail  -n 5 /etc/profile


iconv -f gbk -t utf8 files
cp -i -r -f source dest
http://www.runoob.com/linux/linux-comm-cp.html
如果有 -i 参数的话， 即使有 -f 依然需要 y|n 确认

git显示颜色配置
https://blog.csdn.net/furzoom/article/details/51278232
git config --global color.ui true


alias # 列表
alias 别名='原命令' # 添加
unalias 别名 # 删除
alias命令的作用只局限于该次登入的操作。若要每次登入都能够使用这些命令别名，则可将相应的alias命令存放到bash的初始化文件/etc/bashrc中



www.runoob.com/linux/linux-shell-printf.html【Shell printf 命令】

funname
{
    action
    return int
}


trap 0 | trap "-" 0 每个接收到的sigspec信号都将会被重置为它们进入shell时的值
trap "" 0 忽略
trap -p 0  prints the list of commands associated  with  each  signal
trap -l  print a list of signal names and their corresponding numbers

特殊信号
EXIT(0)  on exit from the shell
DEBUG  before every command
RETURN  a shell  function  or  a  script executed with the . or source builtins finishes executing
ERR  whenever a simple command has a non-zero exit status

 1) SIGHUP       2) SIGINT       3) SIGQUIT      4) SIGILL       5) SIGTRAP
 6) SIGABRT      7) SIGBUS       8) SIGFPE       9) SIGKILL     10) SIGUSR1
11) SIGSEGV     12) SIGUSR2     13) SIGPIPE     14) SIGALRM     15) SIGTERM
16) SIGSTKFLT   17) SIGCHLD     18) SIGCONT     19) SIGSTOP     20) SIGTSTP
21) SIGTTIN     22) SIGTTOU     23) SIGURG      24) SIGXCPU     25) SIGXFSZ
26) SIGVTALRM   27) SIGPROF     28) SIGWINCH    29) SIGIO       30) SIGPWR
31) SIGSYS      34) SIGRTMIN    35) SIGRTMIN+1  36) SIGRTMIN+2  37) SIGRTMIN+3
38) SIGRTMIN+4  39) SIGRTMIN+5  40) SIGRTMIN+6  41) SIGRTMIN+7  42) SIGRTMIN+8
43) SIGRTMIN+9  44) SIGRTMIN+10 45) SIGRTMIN+11 46) SIGRTMIN+12 47) SIGRTMIN+13
48) SIGRTMIN+14 49) SIGRTMIN+15 50) SIGRTMAX-14 51) SIGRTMAX-13 52) SIGRTMAX-12
53) SIGRTMAX-11 54) SIGRTMAX-10 55) SIGRTMAX-9  56) SIGRTMAX-8  57) SIGRTMAX-7
58) SIGRTMAX-6  59) SIGRTMAX-5  60) SIGRTMAX-4  61) SIGRTMAX-3  62) SIGRTMAX-2
63) SIGRTMAX-1  64) SIGRTMAX

       The  entries in the "Action" column of the tables below specify the default disposition for each
       signal, as follows:
       Term   Default action is to terminate the process.
       Ign    Default action is to ignore the signal.
       Core   Default action is to terminate the process and dump core (see core(5)).
       Stop   Default action is to stop the process.
       Cont   Default action is to continue the process if it is currently stopped.
       
       Signal     Value     Action   Comment
       ----------------------------------------------------------------------
       SIGHUP        1       Term    Hangup detected on controlling terminal
                                     or death of controlling process		退出终端
       SIGINT        2       Term    Interrupt from keyboard				^c
       SIGQUIT       3       Core    Quit from keyboard						^\
       SIGILL        4       Core    Illegal Instruction
       SIGABRT       6       Core    Abort signal from abort(3)
       SIGFPE        8       Core    Floating point exception
       SIGKILL       9       Term    Kill signal
       SIGSEGV      11       Core    Invalid memory reference
       SIGPIPE      13       Term    Broken pipe: write to pipe with no
                                     readers
       SIGALRM      14       Term    Timer signal from alarm(2)
       SIGTERM      15       Term    Termination signal
       SIGUSR1   30,10,16    Term    User-defined signal 1
       SIGUSR2   31,12,17    Term    User-defined signal 2
       SIGCHLD   20,17,18    Ign     Child stopped or terminated
       SIGCONT   19,18,25    Cont    Continue if stopped
       SIGSTOP   17,19,23    Stop    Stop process							^z
       SIGTSTP   18,20,24    Stop    Stop typed at tty
       SIGTTIN   21,21,26    Stop    tty input for background process
       SIGTTOU   22,22,27    Stop    tty output for background process

       trap [-lp] [[arg] sigspec ...]
  The command arg is to be read and executed when the shell receives signal(s) sigspec.  If
  arg is absent (and there is a single sigspec) or -, each specified signal is reset to its
  original disposition (the value it had upon entrance to the shell).  If arg is  the  null
  string  the  signal specified by each sigspec is ignored by the shell and by the commands
  it invokes.  If arg is not present and -p has been supplied, then the trap commands asso-
  ciated  with  each  sigspec are displayed.  If no arguments are supplied or if only -p is
  given, trap prints the list of commands associated  with  each  signal.   The  -l  option
  causes  the  shell to print a list of signal names and their corresponding numbers.  Each
  sigspec is either a signal name defined in <signal.h>, or a signal number.  Signal  names
  are case insensitive and the SIG prefix is optional.

  If  a  sigspec  is  EXIT  (0)  the  command arg is executed on exit from the shell.  If a
  sigspec is DEBUG, the command arg is executed before every simple command,  for  command,
  case  command, select command, every arithmetic for command, and before the first command
  executes in a shell function (see SHELL GRAMMAR above).  Refer to the description of  the
  extdebug  option  to the shopt builtin for details of its effect on the DEBUG trap.  If a
  sigspec is RETURN, the command arg is executed each time a shell  function  or  a  script
  executed with the . or source builtins finishes executing.

  If a sigspec is ERR, the command arg is executed whenever a simple command has a non-zero
  exit status, subject to the following conditions.  The ERR trap is not  executed  if  the
  failed  command  is  part of the command list immediately following a while or until key-
  word, part of the test in an if statement, part of a command executed in a && or ││ list,
  or  if the command’s return value is being inverted via !.  These are the same conditions
  obeyed by the errexit option.

  Signals ignored upon entry to the shell cannot be trapped, reset or listed.  Trapped sig-
  nals  that are not being ignored are reset to their original values in a subshell or sub-
  shell environment when one is created.  The return status is  false  if  any  sigspec  is
  invalid; otherwise trap returns true.



trap "echo $$ >> ~/tmp; exit 233;" INT
信号`SIGINT`原本的动作是`Term(terminate the process)`，被`trap`捕捉后，执行指定的操作，放弃默认动作

trap "echo $$ >> ~/tmp; exit 233;" INT
trap -p # 会打印当前捕捉信号的相关信息
# trap -- 'echo 32713 >> ~/tmp; exit 233;' SIGINT

trap "echo $$ >> ~/tmp; exit 233;" INT
trap "-" INT 
# 此前对`INT`信号设置的陷阱将被重置

trap "echo $$ >> ~/tmp; exit 233;" INT
trap "echo $$ >> ~/tmp; exit 400;" INT
trap -p INT 
# trap -- 'echo 32713 >> ~/tmp; exit 233;' SIGINT
# 对同一个信号只能设置一次陷阱，后者会覆盖前者

^c退出的状态码 默认是130
https://unix.stackexchange.com/questions/223189/what-does-exit-code-130-mean-for-postgres-command

状态码范围0-255
当尝试`exit 300`时，实际得到`44`(300%256)


Vim如何消除搜索后的关键字高亮
:noh

强行关闭终端时，先后收到了`TERM`和`HUP`信号

Linux/Unix中向一个进程发送信号用kill命令，不要以为kill命令只是用来杀死进程的，它可以发送各种信号给进程，杀死进程只是用到了其中的一个SIGKILL信号

TERM(15)可以被拦截 KILL(9) 不可以
KILL(9)用来立即结束程序的运行. 本信号不能被阻塞, 处理和忽略。

http://man.linuxde.net/trap【trap命令】【good】【但是翻译极差，建议`man trap` `man signal`】


ctrl-c: ( kill foreground process ) 发送 SIGINT 信号给前台进程组中的所有进程，强制终止程序的执行；
ctrl-z: ( suspend foreground process ) 发送 SIGTSTP 信号给前台进程组中的所有进程，常用于挂起一个进程
ctrl-d: ( Terminate input, or exit shell ) 一个特殊的二进制值，表示 EOF
ctrl-/: 发送 SIGQUIT 信号给前台进程组中的所有进程，终止前台进程并生成 core 文件 
Ctrl-s: 在终端下是有特殊用途的，那就是暂停该终端，
  . 一说是阻止终端输出，但试验后发现`^s`后进程是暂定的，阻止输出这一说法不准确
  # https://blog.csdn.net/bzhxuexi/article/details/35265753
Ctrl-q: 退出这种状态，让终端继续运行
ctrl-l   清屏
https://www.cnblogs.com/klcf0220/p/6125777.html 

w
who
last

 echo hello > /dev/pts/1 可以打印到别到终端上


？堆(keep)栈(stack)
？堆？栈

查看手册章节信息 whatis COMMAND 


文本处理
cat more  less head tail cut sort uniq grep
管道和重定向
> < >> <<
用户 组 劝降
bash及其特性


sed awk grep


/dev/null 软设备（软件模拟的设备）
*功能：	bit bucket	数据黑洞
*应用：	# id user1 &> /dev/null	有的情况不需要显示返回值

setfacl

chrony

user::rwx
user:chrony:-w-
user:admin:--x
group::---
group:admin:-w-
mask::-wx
other::---
default:user::rwx
default:user:admin:r--
default:group::---
default:group:admin:--x
default:mask::r-x
default:other::---


alphae.cn
15052472050

sort -t”,” -k 1n,1 -k 3rn,3 file.txt

块（block）是文件存储空间的最小单位

主设备号
 2 pty
 3 ttyp
 4 ttyS
 6 lp
 7 vcs
 10 misc
 13 input
 14 sound
 21 sg
180 usbBlock devices:
 2 fd
 8 sd
 11 sr
 65 sd
 66 sd
253 vd (virtio)
https://www.cnblogs.com/sammyliu/p/5729026.html【识别 Linux上的设备（磁盘）类型】【good】
面向包的网络设备驱动（package oriented network device driver）
面向块的存储设备驱动（block oriented storage device driver），提供缓冲式（buffered）的设备访问。
面向字节的字符设备驱动 （byte oriented char device driver）
伪设备（pseudo device）


service postfix start
https://blog.csdn.net/csdnones/article/details/50717934【send-mail: fatal】


From root@eva.localdomain  Fri Sep 28 16:00:02 2018
Return-Path: <root@eva.localdomain>
X-Original-To: root
Delivered-To: root@eva.localdomain
From: "(Cron Daemon)" <root@eva.localdomain>
To: root@eva.localdomain
Subject: Cron <root@eva> /usr/lib64/sa/sa1 1 1
Content-Type: text/plain; charset=UTF-8
Auto-Submitted: auto-generated
Precedence: bulk
X-Cron-Env: <XDG_SESSION_ID=3302>
X-Cron-Env: <XDG_RUNTIME_DIR=/run/user/0>
X-Cron-Env: <LANG=en_US.UTF-8>
X-Cron-Env: <SHELL=/bin/sh>
X-Cron-Env: <HOME=/root>
X-Cron-Env: <PATH=/usr/bin:/bin>
X-Cron-Env: <LOGNAME=root>
X-Cron-Env: <USER=root>
Date: Fri, 28 Sep 2018 16:00:02 +0800 (CST)
Status: R

Cannot open /var/log/sa/sa28: No such file or directory


http://www.cnblogs.com/MYSQLZOUQI/p/5186952.html【配置文件后面的rc的由来】
运行控制文件  run control


mail
https://www.cnblogs.com/sunfie/p/5127591.html【 Linux学习之给指定用户发邮件】


anacron 会执行关机期间未完成的 cron任务
↑ 这个说法是错的


/etc/init.d 是`System V`风格的启动脚本(init script)位置
/etc/rc.d 是`BSD`风格


`echo`怎么输出到stderr
echo "this is stderr" 1>&2
echo "this is stderr" >&2
两种写法都可以，大概是因为所有`1`都是可以缺省的

ctrl-d 不是发送信号，而是表示一个特殊的二进制值，表示 EOF

bg 重新运行 暂停的(stopped)的后台工作

bg %N // `%`是特别用来标志工作号的
kill %num
kill PID

停止后台进程
stop %num  
kill -stop PID


@ 中断(interrupt)
中断是指计算机在执行期间，系统内发生任何非寻常的或非预期的急需处理事件，使得CPU暂时中断当前正在执行的程序而转去执行相应的事件处理程序，待处理完毕后又返回原来被中断处继续执行或调度新的进程执行的过程
引起中断发生的事件被称为中断源
中断源向CPU发出的请求中断处理信号称为中断请求，而CPU收到中断请求后转到相应的事件处理程序称为中断响应
禁止中断 CPU内部的处理器状态字PSW的中断允许位已被清除





